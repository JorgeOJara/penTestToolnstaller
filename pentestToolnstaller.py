import subprocess
import os
import shutil
from tqdm import tqdm
import time

def log(message):
    """Print a log message with a timestamp."""
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}")

def run_command(command, description="Processing", timeout=None):
    """Run a shell command and print the output with a progress bar."""
    log(f"Starting: {description} - Command: {command}")
    with tqdm(total=1, desc=description) as pbar:
        try:
            result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True, timeout=timeout)
            pbar.update(1)
            log(f"Completed: {description} - Command: {command}")
            print(result.stdout)
        except subprocess.TimeoutExpired:
            log(f"Timeout: {description} - Command: {command}")
            print(f"Command '{command}' timed out.")
            pbar.update(1)
        except subprocess.CalledProcessError as e:
            log(f"Error: {description} - Command: {command}")
            print(f"Error occurred: {e.stderr}")
            pbar.update(1)

def is_installed(package_name):
    """Check if a package is installed."""
    log(f"Checking if {package_name} is installed")
    try:
        subprocess.run([package_name, '--version'], check=True, text=True, capture_output=True)
        log(f"{package_name} is installed.")
        return True
    except subprocess.CalledProcessError:
        log(f"{package_name} is not installed (Command failed).")
        return False
    except FileNotFoundError:
        log(f"{package_name} is not installed (File not found).")
        return False

def install_tool(tool_name, install_command):
    """Install a specific tool if it's not already installed."""
    if not is_installed(tool_name):
        log(f"{tool_name} is not installed. Proceeding with installation.")
        run_command(install_command, description=f"Installing {tool_name}")
    else:
        log(f"{tool_name} is already installed. Skipping installation.")

def install_hacking_tools():
    log("Starting hacking tools installation process.")
    
    with tqdm(total=4, desc="Installing Hacking Tools", unit="tool") as tool_pbar:
        
        # Install Nmap
        install_tool("nmap", "apt-get install -y nmap")
        tool_pbar.update(1)

        # Install Metasploit (msfconsole)
        if not is_installed("msfconsole"):
            log("Metasploit (msfconsole) is not installed. Proceeding with installation.")
            run_command("curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall", description="Downloading Metasploit installer")
            run_command("chmod 755 msfinstall", description="Setting permissions on Metasploit installer")
            run_command("./msfinstall", description="Installing Metasploit (msfconsole)")
        else:
            log("Metasploit (msfconsole) is already installed. Skipping installation.")
        tool_pbar.update(1)

        # Log for Cobalt Strike
        log("Cobalt Strike installation: Remember to install manually if not already done.")
        tool_pbar.update(1)

        # Install Proxychains
        install_tool("proxychains", "apt-get install -y proxychains")
        tool_pbar.update(1)

        # Placeholder for additional tools
        # Example: install_tool("tool_name", "apt-get install -y tool_command")
    
    log("Hacking tools installation process completed.")

if __name__ == "__main__":
    log("Script started.")
    install_hacking_tools()
    log("Script finished.")
