import subprocess
import os
import shutil
from tqdm import tqdm
import time

def log(message):
    """Print a log message with a timestamp."""
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}")

def run_command(command, description="Processing", timeout=None):
    """Run a shell command and print the output with a progress bar."""
    log(f"Starting: {description} - Command: {command}")
    with tqdm(total=1, desc=description) as pbar:
        try:
            result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True, timeout=timeout)
            pbar.update(1)
            log(f"Completed: {description} - Command: {command}")
            print(result.stdout)
        except subprocess.TimeoutExpired:
            log(f"Timeout: {description} - Command: {command}")
            print(f"Command '{command}' timed out.")
            pbar.update(1)
        except subprocess.CalledProcessError as e:
            log(f"Error: {description} - Command: {command}")
            print(f"Error occurred: {e.stderr}")
            pbar.update(1)

def is_installed(package_name):
    """Check if a package is installed."""
    log(f"Checking if {package_name} is installed")
    try:
        subprocess.run([package_name, '--version'], check=True, text=True, capture_output=True)
        log(f"{package_name} is installed.")
        return True
    except subprocess.CalledProcessError:
        log(f"{package_name} is not installed (Command failed).")
        return False
    except FileNotFoundError:
        log(f"{package_name} is not installed (File not found).")
        return False

def ensure_clean_directory(path):
    """Ensure the directory is empty, if it exists. If it does not exist, create it."""
    log(f"Ensuring directory {path} is clean.")
    if os.path.exists(path):
        log(f"Directory {path} exists. Clearing its contents...")
        shutil.rmtree(path)  # Remove the directory and all its contents
    os.makedirs(path)  # Recreate the directory
    log(f"Directory {path} is now clean and ready.")

def install_tools():
    log("Starting installation process.")
    
    with tqdm(total=6, desc="Overall Progress", unit="step") as overall_pbar:
        
        log("Step 1: Updating package lists.")
        run_command("apt-get update", description="Updating package lists")
        overall_pbar.update(1)
        
        log("Step 2: Checking and installing Git if necessary.")
        if not is_installed("git"):
            log("Git is not installed. Proceeding with installation.")
            run_command("apt-get install -y git", description="Installing git")
        else:
            log("Git is already installed. Skipping installation.")
        overall_pbar.update(1)

        log("Step 3: Ensuring /opt/ptf directory is clean.")
        ptf_directory = "/opt/ptf"
        ensure_clean_directory(ptf_directory)
        overall_pbar.update(1)
        
        log("Step 4: Cloning PenTesters Framework (PTF).")
        run_command(f"git clone https://github.com/trustedsec/ptf {ptf_directory}", description="Cloning PTF repository")
        overall_pbar.update(1)

        log("Step 5: Running PTF setup.")
        run_command(f"cd {ptf_directory} && ./ptf", description="Running PTF setup", timeout=600)  # Adjust timeout as necessary
        overall_pbar.update(1)
        
        log("Step 6: Installing selected modules.")
        modules = [
            "exploitation/install_update_all",
            "intelligence-gathering/install_update_all",
            "post-exploitation/install_update_all",
            "powershell/install_update_all",
            "vulnerability-analysis/install_update_all"
        ]
        
        for module in tqdm(modules, desc="Installing modules", unit="module"):
            log(f"Installing module: {module}")
            run_command(f"use modules/{module}")
        overall_pbar.update(1)

        log("Step 7: Finalizing setup by changing directory to /pentest.")
        run_command("cd /pentest", description="Finalizing setup")
    
    log("Installation process completed.")

if __name__ == "__main__":
    log("Script started.")
    install_tools()
    log("Script finished.")
