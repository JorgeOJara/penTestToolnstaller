import subprocess
import os
import shutil
from tqdm import tqdm
import time

def run_command(command, description="Processing", timeout=None):
    """Run a shell command and print the output with a progress bar."""
    with tqdm(total=1, desc=description) as pbar:
        try:
            result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True, timeout=timeout)
            pbar.update(1)
            print(result.stdout)
        except subprocess.TimeoutExpired:
            print(f"Command '{command}' timed out.")
            pbar.update(1)
        except subprocess.CalledProcessError as e:
            print(f"Error occurred: {e.stderr}")
            pbar.update(1)

def is_installed(package_name):
    """Check if a package is installed."""
    try:
        subprocess.run([package_name, '--version'], check=True, text=True, capture_output=True)
        return True
    except subprocess.CalledProcessError:
        return False
    except FileNotFoundError:
        return False

def ensure_clean_directory(path):
    """Ensure the directory is empty, if it exists. If it does not exist, create it."""
    if os.path.exists(path):
        print(f"Directory {path} already exists. Clearing its contents...")
        shutil.rmtree(path)  # Remove the directory and all its contents
    os.makedirs(path)  # Recreate the directory

def install_tools():
    # Progress bar for overall process
    with tqdm(total=6, desc="Overall Progress", unit="step") as overall_pbar:

        # Update package lists
        run_command("apt-get update", description="Updating package lists")
        overall_pbar.update(1)
        
        # Check if git is installed; if not, install it
        if not is_installed("git"):
            print("Git is not installed. Installing git...")
            run_command("apt-get install -y git", description="Installing git")
        else:
            print("Git is already installed.")
        overall_pbar.update(1)

        # Ensure the /opt/ptf directory is clean
        ptf_directory = "/opt/ptf"
        ensure_clean_directory(ptf_directory)
        overall_pbar.update(1)
        
        # Clone PenTesters Framework (PTF)
        run_command(f"git clone https://github.com/trustedsec/ptf {ptf_directory}", description="Cloning PTF repository")
        overall_pbar.update(1)

        # Navigate to the PTF directory and run setup
        run_command(f"cd {ptf_directory} && ./ptf", description="Running PTF setup", timeout=600)  # Adjust timeout as necessary
        overall_pbar.update(1)
        
        # Install various modules
        modules = [
            "exploitation/install_update_all",
            "intelligence-gathering/install_update_all",
            "post-exploitation/install_update_all",
            "powershell/install_update_all",
            "vulnerability-analysis/install_update_all"
        ]
        
        for module in tqdm(modules, desc="Installing modules", unit="module"):
            run_command(f"use modules/{module}")
        overall_pbar.update(1)

        # Change directory to /pentest
        run_command("cd /pentest", description="Finalizing setup")

if __name__ == "__main__":
    install_tools()
